font-size: 10
title: tapl ch 23
ofname: tapl_23

#

:ch 23
全称型

:sec 0

:s
前章では let 多相を学んだ。本章では、System F という強力な計算体系の下で、より一般的な多相性について考える。
:e

:sec 1
動機

:s
id 関数を定義するとき、下のように各型に対しての id 関数を逐一定義するのは面倒。

:s-item
-idNat = λx:Nat. x
-idBool = λx:Bool. x
:e-item

コード中の異なる箇所で似た機能が実現されているとき、差分を抽象化して一つにまとめることは、一般的に常に有益である。

今の場合の差分は「型」にあるため、必要なのは以下の２点となる。

:s-item
-項から型を抽象化する機能
-抽象化した項を具体的な型注釈で具体化する機能
:e-item
:e

:sec 2
さまざまな多相性

:s
\一つのコードを複数の型で扱えるようにした型システムを、<b>多相的</b>な型システムと呼ぶ。
多相性にはいくつかの種類がある。

:s-item
-\<b>パラメータ多相</b>:<br>型変数を用いて、一つのコードを総称的に型付けし、必要に応じて具体化できる。その具体化は全て同じ振る舞いをする。
-\<b>非可述的多相（一級多相）</b>:<br>もっとも強力なパラメータ多相。本章で扱うもの。実用上では let 多相と呼ばれる。
-\<b>let 多相</b>:<br>多相性を let 束縛だけに限定し、多相的な値を引数として受け取ることを許さない。その代わりに、便利で自然な形の型再構築が可能。
-\<b>アドホック多相</b>:<br>異なる型の引数に対してそれぞれ異なる実装を持つ場合に必要となる多相性。「オーバーロード」では、関数適用ごとにその引数の型に基づいて、コンパイラや実行時システムが適切な実装を選択する。
-\<b>内包的多相</b>:<br>アドホック多相をより強力にしたもの。実行時の型に関する制限された計算が可能になる。「アンボックス化」など。
-\<b>部分型多相</b>:<br>15 章で紹介したもの。１つの項に複数の型を与えることを可能にする。
:e-item

以上の多相性を一つの言語に盛り込むことは可能である。Standard ML は、パラメータ多相に加え、組み込みでオペレーターオーバーロードを実現している。

関数型プログラミング分野では、「多相性」というとほぼパラメータ多相を指すが、オブジェクト指向プログラミング分野では部分型多相を意味し、「パラメータ多相」のことはジェネリクスと呼ぶ。
:e

:sec 3
System F

:s
本章で扱う体系は、System F と呼ばれる。
単純型付きラムダ計算 λ-> を拡張したものに当たるために「多相ラムダ計算」と呼ばれたり、Curry-Howard 同型を通じて二階直観論理に対応するために「二階ラムダ計算」と呼ばれることもある。

※二階直観論理とは、証明（項）だけでなく、述語（型）の量化も許す論理体系。

\<a href="#fig.23.1">図23-1</a> に定義を示す。

\<b id="fig.23.1">図23-1: System F</b>
:s-box
★ 項の定義
:s-table
|t| ::= | x | 変数 |
| |     | λx:T. t | λ抽象 |
| |     | t t | 関数適用 |
| |     | λX. t | 型抽象* |
| |     | t [T] | 型適用* |
:e-table

★ 値の定義
:s-table
|v| ::= | λx: T. t | λ抽象値 |
| |     | λX. t | 型抽象値* |
:e-table

★ 型、文脈の定義は省略

★ 評価規則
:s-horizon
:inf-E-TApp*(t1 [T2] -> t1' [T2], [t1 -> t1'])
:inf-E-TAppTAbs*((λX. t12) [T2] -> [X |-> T2] t12, [])
:e-horizon

★ 型付け規則
:s-horizon
:inf-T-TAbs*(Γ├ λX. t2 : ∀X. T2, [Γ\, X ├ t2 : T2])
:inf-T-TApp*(Γ├ t1 [T2] : [X |-> T2] T12, [Γ├ t1 : ∀X. T12])
:e-horizon

:e-box
:e

:sec 4
事例

:s
System F の体系の上で、いくつかの事例を提示する。
\<h4>肩慣らし</h4>id = λX. λx:X. x
=> id : ∀X. X -> X

id [Nat]
=> <fun> : Nat -> Nat

id [Nat] 0
=> 0 : Nat

double = λX. λf:X->X. λa:X. f (f a)
=> double : ∀X. (X -> X) -> X -> X

単純型付きラムダ計算では、多相的な自己適用 λx. x x という型無し項を型付けできなかった。（演習 9.3.2）
System F では x に多相型を与えて、適切に具体化することで、この項の型付けが可能になる。

selfApp = λx:∀X.X->X. x [∀X.X->X] x
=> selfApp : (∀X. X -> X) -> (∀X. X -> X)

自己適用の例として、double を使った四倍関数を作ってみる。

quardruple = λX. double [X->X] (double [X])
=> quardruple : ∀X. (X -> X) -> X -> X

\<b id="23.4.1">演習 23.4.1</b> <a href="#fig.23.1">図23-1</a>の型付け規則によって、上記の項の型を確認せよ。

:s-box
証明）
省略
:e-box


\<h4>多相リスト</h4>型構築子 List と以下のプリミティブを言語に持たせることを考えよう。
:s-item
-nil : ∀X. List X
-cons : ∀X. X -> List X -> List X
-isnil : ∀X. List X -> Bool
-head : ∀X. List X -> X
-tail : ∀X. List X -> List X
:e-item

このとき、多相的な map 関数は以下のように定義できる。

:s-table
|map| = | λX. λY. λf:X->Y.|
|   |   | (fix (λm: List X -> List Y. |
|   |   | 　λl: List X. |
|   |   | 　　if isnil [X] l then nil [Y] |
|   |   | 　　else cons [Y] (f (head [X] l)) (m (tail [X] l)))) |
:e-table

\<b id="23.4.2">演習 23.4.2</b> map が上記の型を持つか確認せよ。

:s-box
証明）
省略
:e-box


\<b id="23.4.3">演習 23.4.3</b> 多相的なリスト反転関数をかけ。
reverse : ∀X. List X -> List X

:s-box
証明）
:s-table
|addLast| = | λX. λa:X. |
|       |   | (fix (λm: List X -> List X. |
|       |   | 　λl: List X. |
|       |   | 　　if isnil [X] l then cons [X] a (nil [X]) |
|       |   | 　　else cons [X] (head [X] l) (m (tail [X] l)))) |
|reverse| = | λX. |
|       |   | (fix (λm: List X -> List X. |
|       |   | 　λl: List X. |
|       |   | 　　if isnil [X] l then nil [X] |
|       |   | 　　else addLast [X] (m head [X] l) (m (tail [X] l)))) |
:e-table
:e-box


\<b id="23.4.4">演習 23.4.4</b> 単純な多相ソート関数をかけ。
sort : ∀X. (X -> X -> Bool) -> List X -> List X

:s-box
証明）
:s-table
|insert | = | λX. λf:X->X->Bool. λa:X. |
|       |   | (fix (λm: List X -> List X. |
|       |   | 　λl: List X. |
|       |   | 　　if isnil [X] l then cons [X] a (nil [X]) |
|       |   | 　　else if f a (head [X] l) then cons [X] a l |
|       |   | 　　else cons [X] (head [X] l) (m (tail [X] l))))|
|sort   | = | λX. λf:X->X->Bool |
|       |   | (fix (λm: List X -> List X. |
|       |   | 　λl: List X. |
|       |   | 　　if isnil [X] l then nil [X] |
|       |   | 　　else insert [X] f (head [X] l) (m (tail [X] l)))) |
:e-table
:e-box

\<h4>Church 表現</h4>型無しラムダ計算では、Church 表現を用いてブール値・自然数を表現することができた。これと同じことを System F でもやってみる。

:s-table
|            |\||        |\|| λ->                  |\|| System F                            |\|
| ーーーーー |+| ーーー |+| ーーーーーーーーーー |+| ーーーーーーーーーーーーーーーーーーーー |+|
| ブール値   |\|| 型     |\|| -                    |\|| CBool = ∀X. X -> X -> X             |\|
|            |\|| tru    |\|| λt: λf: t            |\|| λX. λt:X. λf:X. t                   |\|
|            |\|| fls    |\|| λt: λf: f            |\|| λX. λt:X. λf:X. f                   |\|
|            |\|| not    |\|| -                    |\|| λb:CBool. λX. λt:X. λf.X. b [X] f t |\|
|            |\||        |\|| -                    |\||                                     |\|
| 自然数     |\|| 型     |\|| -                    |\|| CNat = ∀X. (X -> X) -> X -> X |\|
|            |\|| c0     |\|| λs. λz. z            |\|| λX. λs:X->X. λz:X. z           |\|
|            |\|| c1     |\|| λs. λz. s z          |\|| λX. λs:X->X. λz:X. s z         |\|
|            |\|| c2     |\|| λs. λz. s (s z)      |\|| λX. λs:X->X. λz:X. s (s z)     |\|
|            |\|| c3     |\|| λs. λz. s (s (s z))  |\|| λX. λs:X->X. λz:X. s (s (s z)) |\|
|            |\|| csucc  |\|| -                    |\|| λn:CNat. λX. λs:X->X. λz:X. s (n [X] s z) |\|
|            |\|| cplus1 |\|| -                    |\|| λm:CNat. λn:CNat. m [CNat] csucc n  |\|
:e-table

\<b id="23.4.5">演習 23.4.5</b> 型 CBool の引数を２つ受け取り、論理積を返す and をかけ。

:s-box
証明）
and = λb1:CBool. λb2:CBool. λX. λt:X. λf.X. b1 [X] (b2 [X] t f) f
:e-box

\<b id="23.4.6">演習 23.4.6</b> Church 数 c0 に適用されたときは tru、さもなくば fls を返す 関数 iszero をかけ。

:s-box
証明）
iszero = λn:CNat. n [CBool] (λx:CBool. fls) tru
:e-box


\<b id="23.4.7">演習 23.4.7</b> 以下が正しく型付けされていて、乗算と冪乗算になっていることを確認せよ。
times = λm:CNat. λn:CNat. λX. λs:X->X. n [X] (m [X] s)
=> times : CNat -> CNat -> CNat

cexp = λm:CNat. λn:CNat. λX. n [X->X] (m [X])
=> cexp : CNat -> CNat -> CNat

:s-box
証明）
省略
:e-box

\<!--
\<h4>リストの表現</h4>次いで、数の Church 表現をリストに拡張してみよう。純粋な System F の表現力がわかる好例である。

要素 x,y,z を持つリストは、任意の関数 f と初期値 v が与えられ f x (f y (f z v)) として表現される。

List X = ∀R. (X -> R -> R) -> R -> R

nil = λX. (λR. λc:X->R->R. λn:R. n) as List X
=> nil : ∀X. List X

cons = λX. λhd:X. λtl:List X.
　(λR. λc:X->R->R. λn:R. c hd (tl [R] c n)) as List X |\|
=> cons : ∀X. X -> List X -> List X

isnil = λX. λl:List X. l [Bool] (λhd:X. λtl:Bool. false) true
=> isnil : ∀X. List X -> Bool

head の操作には、空のリストをどう扱うかという問題がある。これを解決するには、言語に一般的な不動点演習があれば、それを使って発散させて任意の型の式を作ってしまえば良い。

diverge = λX. λ_:Unit. fix (λx:X. x)
=> diverge : ∀X. Unit -> X

head = λX. λl:List X. l [X] (λhd:X. λtl:X. hd) (diverge [X] unit)
=> head : ∀X. List X -> X

しかし、値呼び評価であるために、この head の定義だと常に発散してしまうことになる。
これを回避するためには、l の第一引数の型を変えてやればよい。

head = λX. λl:List X. l [Unit -> X] (λhd:X. λtl:Unit->X. λ_:Unit. hd) (diverge [X]) unit
=> head : ∀X. List X -> X

\<b id="23.4.11">演習 23.4.11</b> head では fix を用いた diverge を使っているため、純粋な System F では表現されていない。head の別バージョンとして、リストが空だったときに返すべき値を引数として受け取るものをかけ。

:s-box
証明）
head' = λX. λl:List X. λa:X. l [X] (λhd:X. λtl:X. hd) a
:e-box


\<b id="23.4.12">演習 23.4.12</b> fix のない純粋な System F で比較関数、ソートされたリスト、新しい要素の３つを受け取り、リストの正しい位置に要素を挿入する insert 関数を定義せよ。それを用いて sort 関数を定義せよ。

:s-box
証明）
:s-table
|insert | = | λX. λf:X->X->Bool. λa:X. λl:List X. |
|       |   | 　l [List X] (λhd:X. λtl:List X.|
|       |   | 　　if f a hd then 
|sort   | = | λX. λf:X->X->Bool |
|       |   | (fix (λm: List X -> List X. |
|       |   | 　λl: List X. |
|       |   | 　　if isnil [X] l then nil [X] |
|       |   | 　　else insert [X] f (head [X] l) (m (tail [X] l)))) |
:e-table

:e-box

\ -->


以降、Church 表現の演習問題が続く...

:e

:sec 5
基本的な性質

:s
\<b id="23.5.1">定理 23.5.1</b> [保存] Γ├ t : T かつ t -> t' ならば Γ├ t' : T

\<b id="23.5.2">定理 23.5.2</b> [進行] t が閉じた、正しく型付けされた項ならば、t は値か、ある t' が存在して t -> t'

\System F は、λ-> と同様に<b>正規化</b>の性質、つまり正しく型付けされたプログラムの評価は停止する。

\<b id="23.5.3">定理 23.5.3</b> [正規化] 正しく型付けされた System F の項は正規化可能である。
:e

:sec 6
型消去、型付け可能性、型再構築

:s
System F の項から全ての型注釈を取り払い、型無しラムダにする型消去関数 erase を定義できる。

:s-table
| ... | | |
|erase(λX. t2) | = | erase(t2) |
|erase(t1 [T2]) | = | erase(t1) |
:e-table

型無しラムダ計算の項 m から、erase(t) = m になるような System F で正しく型付けされる項 t を見つける問題を 型再構築問題という。

\<b id="23.6.1">定理 23.6.1</b> 型再構築問題は決定不能である。

System F では完全な型再構築だけでなく、部分的な型再構築もさまざまなものが決定不能であるとわかっている。

\<b id="23.6.2">定理 23.6.2</b> 項 s が与えられたとき、s よりも多く型適用・型注釈を持つような、System F の正しく型付けされた項 t が存在するかどうかは決定不能である。

\<b id="23.6.3">演習 23.6.3</b> 正規化可能性は、型無し項 omega = (λx. x x) (λy. y y) が System F で型付けできないことを意味している。omega の簡約は決して簡約化に至らないからである。一方で、この事実は「組み合わせ」的に証明することができる。
:s-itemn
-\ System F の項が、型抽象でも型適用でもない場合、その項は「露出している」という。<br>t がなんらかの文脈で型付け可能で、かつ erase(t) = m であるならば、ある露出した項 s が存在して、erase(s) = m かつ s は 同じ文脈かあるいは拡張された文脈で正しく型付けされる。このことを示せ。
-\ erase(t) = m かつ Γ├ t : T ならば、λ<X>. (u [<A>]) という形であるような s が存在し、erase(s) = m かつ Γ├ s : T であることを示せ。ただし <x> は 型変数の列、<A> は型の列、u は 露出した項である。
-\ 略
-\ 略
-\ 略
-\ 略
-\ omega は System F で型付け不能であることを示せ。
:e-itemn

:s-box
証明）
あとで
:e-box

:e

:sec 7
型消去と評価順序

:s
多相的な言語の多くは、型消去意味論を採用している。この意味論の下では、型検査のあとで型をすべて消去した型無し項を機械語でコンパイルしたりする。
この型消去は、System F に例外を投げるプリミティブ error を追加したとき、注意が必要である。

let f = (λX. error) in 0

上記の項は型を消去すると

let f = error in 0

となって、意図せず例外を投げてしまうことになる。このことから、実は型抽象は意味論的に重要な役割を果たすことがわかる。

この食い違いは、erase 関数を以下のように改めることで解決できる。

:s-table
| ... | | |
|erase' (λX. t2) | = | λ_. erase' (t2) |
|erase' (t1 [T2]) | = | erase' (t1) dummyv |
:e-table

以下の定理より、型消去と評価はどちから行ってもよいことがわかる。

\<b id="23.7.2">定理 23.7.2</b> erase'(t) = u のとき、以下のどちらか一方が成立する。
:s-itemn
- それぞれの評価関係によって t と u がともに正規形
- t -> t' かつ u -> u' で、erase'(t') = u' を満たす
:e-itemn

:e

:sec 8
制限された System F

:s
let 多相は Sysetem F を以下のように一部制限したものと見なせる。
:s-item
-型変数は量子化のない型（単型）の中だけで有効
-量化された型が矢印の左側に現れることを許さない （例：(∀X. ...) -> Nat など
:e-item

また、他の System F の制限として、ランク２多相なるものなどがある。
:e

:sec 9
パラメータ性

:s
たいしたことが書いてないので省略。
:e

:sec 10
非可述性

:s
System F の多相性はしばしば非可述的であるといわれる。これは、定義されているそのもの自身を定義域とした量子化を定義に含むということである。
例えば、型 T = ∀X. X -> X の型変数X は任意の型の上を受け入れる。これは T 自身も含む。

λx:T. x [T->T] x

一方、ML に見られる多相性はしばしば可述的である。量化の値域が単型に制限されているためである。

:s-box
ラッセルのパラドックス：
R = { x | x ∉ x } なる集合の集合を考える。
:s-item
- R ∈ R ならば、R の定義から R は R自身 を含まないはずであるから、矛盾。
- R ∉ R ならば、R の定義から R は R自身 を含むはずなので、矛盾。
:e-item

このパラドックスは、所属条件の x を、わざわざ x 自身の所属条件によって定義してしまったのが起因。
Russel は、このような所属条件を 非可述的 と呼び、類を定義する手段として、認めないことにした。これによって、パラドックスは取り除かれた。
:e-box
:e
